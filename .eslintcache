[{"/Users/richardjarram/code/catonmat/trumpsweeper/src/reportWebVitals.ts":"1","/Users/richardjarram/code/catonmat/trumpsweeper/src/App.tsx":"2","/Users/richardjarram/code/catonmat/trumpsweeper/src/index.tsx":"3","/Users/richardjarram/code/catonmat/trumpsweeper/src/components/Board.tsx":"4","/Users/richardjarram/code/catonmat/trumpsweeper/src/components/Toolbar.tsx":"5","/Users/richardjarram/code/catonmat/trumpsweeper/src/contexts.ts":"6","/Users/richardjarram/code/catonmat/trumpsweeper/src/components/Cell.tsx":"7","/Users/richardjarram/code/catonmat/trumpsweeper/src/globals.ts":"8"},{"size":425,"mtime":1607207666653,"results":"9","hashOfConfig":"10"},{"size":1239,"mtime":1608517954177,"results":"11","hashOfConfig":"10"},{"size":501,"mtime":1607208543401,"results":"12","hashOfConfig":"10"},{"size":3700,"mtime":1608518358061,"results":"13","hashOfConfig":"10"},{"size":2031,"mtime":1608248434992,"results":"14","hashOfConfig":"10"},{"size":1257,"mtime":1608248453447,"results":"15","hashOfConfig":"10"},{"size":440,"mtime":1608518329369,"results":"16","hashOfConfig":"10"},{"size":4497,"mtime":1608519116859,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"18j7g8x",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"20"},"/Users/richardjarram/code/catonmat/trumpsweeper/src/reportWebVitals.ts",[],["36","37"],"/Users/richardjarram/code/catonmat/trumpsweeper/src/App.tsx",[],"/Users/richardjarram/code/catonmat/trumpsweeper/src/index.tsx",[],"/Users/richardjarram/code/catonmat/trumpsweeper/src/components/Board.tsx",[],"/Users/richardjarram/code/catonmat/trumpsweeper/src/components/Toolbar.tsx",[],"/Users/richardjarram/code/catonmat/trumpsweeper/src/contexts.ts",[],"/Users/richardjarram/code/catonmat/trumpsweeper/src/components/Cell.tsx",[],"/Users/richardjarram/code/catonmat/trumpsweeper/src/globals.ts",["38"],"import { createContext, useContext } from 'react'\n\n// Cell Globals\nenum CellSkin {\n  unclicked = '/images/retro/flag.svg',\n  mine = '/images/retro/mine.png',\n  flag = '/images/retro/flag.svg',\n  blank = '/images/retro/blank.svg',\n  one = '/images/retro/1.svg',\n  two = '/images/retro/2.svg',\n  three = '/images/retro/3.svg',\n  four = '/images/retro/4.svg',\n  five = '/images/retro/5.svg',\n  six = '/images/retro/6.svg',\n  seven = '/images/retro/7.svg',\n  eight = '/images/retro/8.svg',\n}\n\nexport interface CellState {\n  location: [number, number];\n  clicked: boolean;\n  mine: boolean;\n  flagged: boolean;\n  neighbors: number;\n  style?: object;\n  setStyle?: (cell: CellState) => object\n  updateBoard?: (j: number, i:number) => void;\n}\n\nexport const setCellStyle = ({location, clicked, mine, flagged, neighbors} : CellState) => {\n  const style = { \n    backgroundImage: `url('/images/retro/unopened.svg')`,\n    gridArea: `${location[0]}-${location[1]}`\n  }\n\n  if (flagged) {\n    style.backgroundImage = `url('/images/retro/flag.svg')`\n  } else if (clicked && mine) {\n    style.backgroundImage = `url('/images/retro/mine.png')`\n  } else if (clicked && !mine && !flagged && neighbors === 0) {\n    style.backgroundImage = `url('/images/retro/opened.svg')`\n  } else if (clicked && !mine && !flagged && neighbors > 0) {\n    style.backgroundImage = `url('/images/retro/${neighbors}.svg')`\n  }\n\n  return style;\n}\n\n// Board Globals\nexport enum GameProgress {\n  NewGame = 'newGame',\n  InProgress = 'inProgress',\n  Won = 'won',\n  Lost = 'lost',\n}\n\nexport enum BoardSize {\n  Test = 5,\n  Easy = 5,\n  Regular = 10,\n  Hard = 20,\n}\n\nexport enum NumberOfMines {\n  Test = 0,\n  Easy = 3,\n  Regular = 12,\n  Hard = 188,\n}\n\nexport interface BoardState {\n  gameProgress: GameProgress;\n  boardSize: BoardSize;\n  numberOfMines: NumberOfMines;\n  grid?: CellState[][];\n  mineMap: [number, number][];\n}\n\n// TODO: Consider refactoring these interface so you have one interface such that:\n// { \n//   easy: {\n//      gameProgress: gameProgress.Easy,\n//      boardSize: boardSize.Easy,\n//      numberOfMines: NumberOfMines.Easy\n//   }\n// }\n\nexport const easyBoardState: BoardState = {\n  gameProgress: GameProgress.NewGame,\n  boardSize: BoardSize.Easy,\n  numberOfMines: NumberOfMines.Easy,\n  mineMap: [[-1,-1]],\n}\n\nexport const regularBoardState: BoardState = {\n  gameProgress: GameProgress.NewGame,\n  boardSize: BoardSize.Regular,\n  numberOfMines: NumberOfMines.Regular,\n  mineMap: [[-1,-1]],\n}\n\nexport const hardBoardState: BoardState = {\n  gameProgress: GameProgress.NewGame,\n  boardSize: BoardSize.Hard,\n  numberOfMines: NumberOfMines.Hard,\n  mineMap: [[-1,-1]],\n}\n\n// used only in Board.test.tsx\nexport const testBoardState: BoardState = {\n  gameProgress: GameProgress.InProgress,\n  boardSize: BoardSize.Test,\n  numberOfMines: NumberOfMines.Test,\n  mineMap: [\n    [2,1],\n    [3,2]\n  ]\n}\n\nconst setCell = (cell: CellState, location: [number, number], neighbors : number, mine?: boolean) => {\n  cell.location = location\n  cell.neighbors = neighbors\n  cell.mine = mine ? true : false\n  return cell\n}\n\nconst openedCell: CellState = {\n  location: [0, 0],\n  clicked: true,\n  mine: false,\n  flagged: false,\n  neighbors: 0,\n}\n\nexport const completedTestBoardState: BoardState = {\n  gameProgress: GameProgress.InProgress,\n  boardSize: BoardSize.Test,\n  numberOfMines: NumberOfMines.Test,\n  mineMap: [\n    [2,1],\n    [3,2]\n  ],\n  grid: [\n    [ setCell(openedCell, [0,0], 0), setCell(openedCell, [0,1], 0), setCell(openedCell, [0,2], 0), setCell(openedCell, [0,3], 0), setCell(openedCell, [0,4], 0) ],\n    [ setCell(openedCell, [1,0], 1), setCell(openedCell, [1,1], 1), setCell(openedCell, [1,2], 1), setCell(openedCell, [1,3], 0), setCell(openedCell, [1,4], 0) ],\n    [ setCell(openedCell, [2,0], 1), setCell(openedCell, [2,1], 1, true), setCell(openedCell, [2,2], 2), setCell(openedCell, [2,3], 1), setCell(openedCell, [2,4], 0) ],\n    [ setCell(openedCell, [3,0], 1), setCell(openedCell, [3,1], 2), setCell(openedCell, [3,2], 1, true), setCell(openedCell, [3,3], 1), setCell(openedCell, [3,4], 0) ],\n    [ setCell(openedCell, [4,0], 0), setCell(openedCell, [4,1], 1), setCell(openedCell, [4,2], 1), setCell(openedCell, [4,3], 1), setCell(openedCell, [4,4], 0) ]\n  ]\n}\n\n// Board Context\nexport const BoardContext = createContext<BoardState>({\n  gameProgress: GameProgress.NewGame,\n  boardSize: BoardSize.Easy,\n  numberOfMines: NumberOfMines.Easy,\n  mineMap: [[-1,-1]],\n})\n\nexport const useBoardContext = () => useContext(BoardContext)\n",{"ruleId":"39","replacedBy":"40"},{"ruleId":"41","replacedBy":"42"},{"ruleId":"43","severity":1,"message":"44","line":4,"column":6,"nodeType":"45","messageId":"46","endLine":4,"endColumn":14},"no-native-reassign",["47"],"no-negated-in-lhs",["48"],"@typescript-eslint/no-unused-vars","'CellSkin' is defined but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]