[{"/Users/richardjarram/code/catonmat/trumpsweeper/src/reportWebVitals.ts":"1","/Users/richardjarram/code/catonmat/trumpsweeper/src/App.tsx":"2","/Users/richardjarram/code/catonmat/trumpsweeper/src/index.tsx":"3","/Users/richardjarram/code/catonmat/trumpsweeper/src/components/Board.tsx":"4","/Users/richardjarram/code/catonmat/trumpsweeper/src/components/Toolbar.tsx":"5","/Users/richardjarram/code/catonmat/trumpsweeper/src/contexts.ts":"6","/Users/richardjarram/code/catonmat/trumpsweeper/src/components/Cell.tsx":"7","/Users/richardjarram/code/catonmat/trumpsweeper/src/globals.ts":"8"},{"size":425,"mtime":1607207666653,"results":"9","hashOfConfig":"10"},{"size":1727,"mtime":1608774644361,"results":"11","hashOfConfig":"10"},{"size":501,"mtime":1607208543401,"results":"12","hashOfConfig":"10"},{"size":9300,"mtime":1608840364137,"results":"13","hashOfConfig":"10"},{"size":2141,"mtime":1608775836284,"results":"14","hashOfConfig":"10"},{"size":1257,"mtime":1608248453447,"results":"15","hashOfConfig":"10"},{"size":1521,"mtime":1608756385985,"results":"16","hashOfConfig":"10"},{"size":10183,"mtime":1608841655893,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"18j7g8x",{"filePath":"21","messages":"22","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"20"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"20"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/richardjarram/code/catonmat/trumpsweeper/src/reportWebVitals.ts",[],["37","38"],"/Users/richardjarram/code/catonmat/trumpsweeper/src/App.tsx",["39","40"],"import React from 'react';\nimport { GameContext, Difficulty, Theme, Opponent} from './contexts'\nimport { \n  easyBoardState, \n  regularBoardState, \n  hardBoardState, \n  testBoardState,\n  BoardState\n} from './globals'\nimport Board from './components/Board'\nimport Toolbar from './components/Toolbar'\nimport './App.scss';\n\n// TODO: Add error boundaries to app: https://medium.com/@sgroff04/2-minutes-to-learn-react-16s-componentdidcatch-lifecycle-method-d1a69a1f753\nfunction App() {\n  const [difficulty, setDifficulty] = React.useState(Difficulty.Easy)\n  const [theme, setTheme] = React.useState(Theme.Retro)\n  const [opponent, setOpponent] = React.useState(Opponent.Trump)\n  const [flags, setFlags] = React.useState(0)\n\n  function drawBoard(difficulty: string) {\n    switch(difficulty) {\n      case 'easy':\n        return easyBoardState\n      case 'regular':\n        return regularBoardState\n      case 'hard':\n        return hardBoardState\n      case 'test':\n        return testBoardState\n      default:\n        throw new Error('Unable to draw board.')\n    }\n  }\n\n  function currentFlags(board: BoardState) {\n    return board.flags\n  }\n\n  function maxFlags(board: BoardState) {\n    return board.maxFlags\n  }\n\n  return (\n    <>\n      <GameContext.Provider value={{state: { difficulty, theme, opponent }, setDifficulty, setTheme, setOpponent}}>\n        <h1>APP: </h1>\n        <p>Difficulty: {difficulty}</p>\n        <p>Theme: {theme}</p>\n        <p>Opponent: {opponent}</p>\n        <p>Current Flags: {currentFlags(drawBoard(difficulty))}</p>\n        <p>Max Flags: {maxFlags(drawBoard(difficulty))}</p>\n        <Board {...drawBoard(difficulty)}/>\n        <Toolbar/>\n      </GameContext.Provider>\n    </>\n  )\n}\n\nexport default App;\n","/Users/richardjarram/code/catonmat/trumpsweeper/src/index.tsx",[],"/Users/richardjarram/code/catonmat/trumpsweeper/src/components/Board.tsx",["41"],"/Users/richardjarram/code/catonmat/trumpsweeper/src/components/Toolbar.tsx",[],"/Users/richardjarram/code/catonmat/trumpsweeper/src/contexts.ts",[],"/Users/richardjarram/code/catonmat/trumpsweeper/src/components/Cell.tsx",["42"],"import { useState } from 'react'\nimport { CellState } from '../globals'\nimport './Cell.scss'\n\nfunction Cell({ location, clicked, mine, flagged, neighbors, updateBoard }: CellState) {\n  const style: object = setStyle(location, clicked, mine, flagged, neighbors)\n\n  function rightClick(event: React.MouseEvent<HTMLDivElement, MouseEvent>, row: number, col: number) {\n    event.preventDefault()\n    flagged = true\n    updateBoard && updateBoard(location[0], location[1], true)\n  }\n\n  return(\n    <div  className='cell' \n          data-testid={`${location[0]}-${location[1]}`} \n          style={style}\n          onContextMenu={(event) => rightClick(event, location[0], location[1])}\n          onClick={() => updateBoard ? updateBoard(location[0], location[1]) : console.error('unable to upate cell')}\n    >\n    </div>\n  )\n}\n\nfunction setStyle(location: [number, number], clicked: boolean, mine: boolean, flagged: boolean, neighbors: number) {\n  const skin = { \n    backgroundImage: `url(/images/retro/unopened.svg)`,\n    gridArea: `${location[0]}-${location[1]}`\n  }\n\n  if (flagged) {\n    skin.backgroundImage = `url(/images/retro/flag.svg)`\n  } else if (clicked && mine) {\n    skin.backgroundImage = `url(/images/retro/mine.png)`\n  } else if (clicked && !mine && !flagged && neighbors === 0) {\n    skin.backgroundImage = `url(/images/retro/opened.svg)`\n  } else if (clicked && !mine && !flagged && neighbors > 0) {\n    skin.backgroundImage = `url(/images/retro/${neighbors}.svg)`\n  }\n\n  return skin;\n}\n\nexport default Cell;\n","/Users/richardjarram/code/catonmat/trumpsweeper/src/globals.ts",[],{"ruleId":"43","replacedBy":"44"},{"ruleId":"45","replacedBy":"46"},{"ruleId":"47","severity":1,"message":"48","line":19,"column":10,"nodeType":"49","messageId":"50","endLine":19,"endColumn":15},{"ruleId":"47","severity":1,"message":"51","line":19,"column":17,"nodeType":"49","messageId":"50","endLine":19,"endColumn":25},{"ruleId":"52","severity":1,"message":"53","line":42,"column":6,"nodeType":"54","endLine":42,"endColumn":29,"suggestions":"55"},{"ruleId":"47","severity":1,"message":"56","line":1,"column":10,"nodeType":"49","messageId":"50","endLine":1,"endColumn":18},"no-native-reassign",["57"],"no-negated-in-lhs",["58"],"@typescript-eslint/no-unused-vars","'flags' is assigned a value but never used.","Identifier","unusedVar","'setFlags' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'boardSize', 'grid', and 'numberOfMines'. Either include them or remove the dependency array.","ArrayExpression",["59"],"'useState' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"60","fix":"61"},"Update the dependencies array to be: [boardSize, correctlyFlaggedCells, grid, numberOfMines]",{"range":"62","text":"63"},[1340,1363],"[boardSize, correctlyFlaggedCells, grid, numberOfMines]"]